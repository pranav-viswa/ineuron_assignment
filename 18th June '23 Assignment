{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. What is the role of the 'else' block in a try-except statement? Provide an example\n",
    "scenario where it would be useful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The else block in a try-except statement is an optional part that provides a code block to be executed if no exceptions are raised in the try block. It is used to specify code that should run when the try block does not raise any exceptions.<br>\n",
    "\n",
    "The basic syntax of a try-except-else statement is as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    # Code that may raise exceptions\n",
    "    # ...\n",
    "    pass\n",
    "except SomeException:\n",
    "    # Code to handle the exception\n",
    "    pass\n",
    "    # ...\n",
    "else:\n",
    "    # Code to be executed when no exception is raised in the try block\n",
    "    pass\n",
    "    # ...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Division Result: 5.0\n",
      "Error: Cannot divide by zero.\n"
     ]
    }
   ],
   "source": [
    "def divide_numbers(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "    except ZeroDivisionError:\n",
    "        print(\"Error: Cannot divide by zero.\")\n",
    "    else:\n",
    "        print(\"Division Result:\", result)\n",
    "\n",
    "# Test the function\n",
    "divide_numbers(10, 2)  # Output: Division Result: 5.0\n",
    "divide_numbers(10, 0)  # Output: Error: Cannot divide by zero.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Can a try-except block be nested inside another try-except block? Explain with an\n",
    "example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yes, a try-except block can be nested inside another try-except block. This concept is known as nested exception handling. It allows you to handle exceptions at different levels of granularity and provides more fine-grained error handling for specific parts of your code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Division Result: 5.0\n",
      "Outer Error: Index out of range.\n",
      "Inner Error: Cannot divide by zero.\n",
      "Outer Error: Index out of range.\n"
     ]
    }
   ],
   "source": [
    "def divide_numbers(a, b):\n",
    "    try:\n",
    "        try:\n",
    "            result = a / b\n",
    "            print(\"Division Result:\", result)\n",
    "        except ZeroDivisionError:\n",
    "            print(\"Inner Error: Cannot divide by zero.\")\n",
    "        \n",
    "        # Some other operation that may raise an exception\n",
    "        data = [1, 2, 3]\n",
    "        value = data[4]\n",
    "\n",
    "    except IndexError:\n",
    "        print(\"Outer Error: Index out of range.\")\n",
    "\n",
    "# Test the function\n",
    "divide_numbers(10, 2)\n",
    "divide_numbers(10, 0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. How can you create a custom exception class in Python? Provide an example that\n",
    "demonstrates its usage."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can create a custom exception class by subclassing the built-in Exception class or any of its derived classes. By defining your custom exception class, you can create more meaningful and descriptive exceptions that suit your specific use case.\n",
    "\n",
    "Here's an example of creating a custom exception class called NegativeNumberError:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valid positive number: 10\n",
      "Error: Negative number (-5) is not allowed.\n"
     ]
    }
   ],
   "source": [
    "class NegativeNumberError(Exception):\n",
    "    def __init__(self, number):\n",
    "        self.number = number\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Error: Negative number ({self.number}) is not allowed.\"\n",
    "\n",
    "def check_positive_number(num):\n",
    "    if num < 0:\n",
    "        raise NegativeNumberError(num)\n",
    "    else:\n",
    "        print(\"Valid positive number:\", num)\n",
    "\n",
    "# Test the custom exception\n",
    "try:\n",
    "    check_positive_number(10)\n",
    "    check_positive_number(-5)\n",
    "except NegativeNumberError as e:\n",
    "    print(e)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. What are some common exceptions that are built-in to Python?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python provides several built-in exceptions that cover a wide range of error situations. Some common built-in exceptions in Python include:<br>\n",
    "\n",
    "ZeroDivisionError: Raised when dividing by zero.<br>\n",
    "TypeError: Raised when an operation or function is applied to an object of inappropriate type.<br>\n",
    "ValueError: Raised when an operation or function receives an argument of the correct type but with an inappropriate value.<br>\n",
    "IndexError: Raised when trying to access an index that is out of range for a sequence (e.g., list, tuple, string).<br>\n",
    "KeyError: Raised when a dictionary key is not found.<br>\n",
    "FileNotFoundError: Raised when a file or directory is requested, but it cannot be found.<br>\n",
    "IOError: Raised when an I/O operation (e.g., reading or writing a file) fails.<br>\n",
    "ImportError: Raised when an import statement fails to find the module or package.<br>\n",
    "NameError: Raised when a name or variable is not found in the local or global scope.<br>\n",
    "AttributeError: Raised when an attribute or method is not found for an object.<br>\n",
    "NotImplementedError: Raised when an abstract method that should be overridden in a subclass is called, but the subclass has not provided a concrete implementation.<br>\n",
    "OverflowError: Raised when a mathematical operation results in a value that is too large to be represented.<br>\n",
    "MemoryError: Raised when the program runs out of memory.<br>\n",
    "RecursionError: Raised when the maximum recursion depth is exceeded during a recursive function call.<br>\n",
    "IndentationError: Raised when there is an indentation-related syntax error, such as mismatched indentation or mixing tabs and spaces.<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. What is logging in Python, and why is it important in software development?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "In Python, logging is a built-in module that provides a flexible and powerful way to record and manage log messages during the execution of a program. The logging module allows developers to capture and store relevant information about the program's behavior, status, errors, warnings, and other events. It facilitates the generation of log files, which can be useful for debugging, monitoring, and auditing the software.<br>\n",
    "\n",
    "The key components of the logging module include:<br>\n",
    "\n",
    "Loggers: They are objects that act as the entry point to the logging system. Developers can create multiple loggers to categorize log messages based on different modules or sections of the program.<br>\n",
    "\n",
    "Handlers: Handlers determine where the log messages go, such as writing to the console, files, or sending them over the network.<br>\n",
    "\n",
    "Formatters: Formatters define the structure and format of the log messages, allowing developers to customize the log output according to their needs.<br>\n",
    "\n",
    "Logging is important in software development for several reasons:<br>\n",
    "\n",
    "Debugging: Logging provides a way to record critical information and debug messages during program execution. Developers can trace the flow of their code, identify issues, and understand the sequence of events that led to errors or unexpected behaviors.<br>\n",
    "\n",
    "Error Tracking: By using logging, developers can log errors and exceptions that occur during program execution. This enables them to identify and handle errors effectively, ensuring the program's stability and reliability.<br>\n",
    "\n",
    "Monitoring: In production environments, logging helps monitor the application's performance and track its usage. Monitoring log messages can provide insights into the application's health and potential performance bottlenecks.<br>\n",
    "\n",
    "Auditing: Logging can be valuable for auditing purposes, especially in applications that handle sensitive data or critical operations. It allows developers to record important events and actions, aiding in compliance and security requirements.<br>\n",
    "\n",
    "Flexible Configuration: The logging module in Python allows developers to configure logging behavior at runtime. They can set different log levels, control verbosity, and direct log messages to different destinations based on application requirements.<br>\n",
    "\n",
    "Informational Purposes: Logging can be used to log informational messages that give an overview of what the application is doing. These messages can help in understanding the program's behavior and performance during development and testing.<br>\n",
    "\n",
    "Overall, logging is an essential tool for software development as it aids in identifying issues, understanding program behavior, and maintaining the application's health and reliability. By incorporating logging into their code, developers can effectively troubleshoot problems, improve code quality, and deliver more robust and maintainable software.<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Explain the purpose of log levels in Python logging and provide examples of when\n",
    "each log level would be appropriate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "In Python logging, log levels are used to categorize log messages based on their severity or importance. Each log level corresponds to a specific numeric value, and messages with log levels below a certain threshold will not be recorded in the log output. This allows developers to control the verbosity of the log output based on the application's needs and the desired level of detail in the logs.<br>\n",
    "\n",
    "The common log levels in Python logging, in increasing order of severity, are:<br>\n",
    "\n",
    "DEBUG: Detailed information, typically used for debugging purposes. These messages are useful for tracing program flow and identifying issues during development and testing.<br>\n",
    "\n",
    "INFO: General information about the program's operation. These messages provide a high-level overview of what the program is doing, such as configuration settings, startup messages, and basic operational status.<br>\n",
    "\n",
    "WARNING: Indicate potential issues or non-critical problems that may require attention. These messages highlight situations that might lead to unexpected behavior but do not prevent the program from functioning correctly.<br><br>\n",
    "\n",
    "ERROR: Signify errors or exceptions that are recoverable and do not crash the program. These messages indicate significant problems that need attention but do not cause the program to terminate.<br>\n",
    "\n",
    "CRITICAL: Represent critical errors or exceptions that can cause the program to crash or halt. These messages indicate severe issues that require immediate attention and may lead to application failure.<br>\n",
    "\n",
    "Each log level has a corresponding method in the logging module, and log messages can be recorded using these methods:<br>\n",
    "\n",
    "logging.debug()<br>\n",
    "logging.info()<br>\n",
    "logging.warning()<br>\n",
    "logging.error()<br>\n",
    "logging.critical()<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DEBUG:root:Division result: 5.0\n",
      "INFO:root:Calculation successful.\n",
      "WARNING:root:Attempted division by zero.\n"
     ]
    }
   ],
   "source": [
    "import logging\n",
    "\n",
    "# Configure the logging settings\n",
    "logging.basicConfig(level=logging.DEBUG)\n",
    "\n",
    "# Example function to demonstrate log levels\n",
    "def perform_calculation(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "        logging.debug(f\"Division result: {result}\")  # Detailed information for debugging\n",
    "        logging.info(\"Calculation successful.\")      # General information about operation\n",
    "        return result\n",
    "    except ZeroDivisionError:\n",
    "        logging.warning(\"Attempted division by zero.\")  # Potential issue, not critical\n",
    "        return None\n",
    "    except Exception as e:\n",
    "        logging.error(f\"An error occurred: {e}\")       # Recoverable error\n",
    "        return None\n",
    "\n",
    "# Test the function\n",
    "result = perform_calculation(10, 2)\n",
    "result = perform_calculation(10, 0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. What are log formatters in Python logging, and how can you customise the log\n",
    "message format using formatters?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In Python logging, log formatters are used to customize the format of log messages before they are written to the log output. Formatters allow developers to define how the log messages should be structured, including the level, timestamp, message, module name, and any other relevant information.<br>\n",
    "\n",
    "The logging module provides the Formatter class to define custom log message formats. You can create an instance of the Formatter class and specify the desired format using a combination of placeholders and literal text.<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DEBUG:custom_logger:This is a debug message.\n",
      "INFO:custom_logger:This is an info message.\n",
      "WARNING:custom_logger:This is a warning message.\n",
      "ERROR:custom_logger:This is an error message.\n",
      "CRITICAL:custom_logger:This is a critical message.\n"
     ]
    }
   ],
   "source": [
    "import logging\n",
    "\n",
    "# Configure the logging settings\n",
    "logging.basicConfig(level=logging.DEBUG)\n",
    "\n",
    "# Create a custom log formatter\n",
    "formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "\n",
    "# Create a logger and add a FileHandler with the custom formatter\n",
    "logger = logging.getLogger(\"custom_logger\")\n",
    "file_handler = logging.FileHandler(\"custom.log\")\n",
    "file_handler.setFormatter(formatter)\n",
    "logger.addHandler(file_handler)\n",
    "\n",
    "# Example function to demonstrate log messages\n",
    "def perform_task():\n",
    "    logger.debug(\"This is a debug message.\")\n",
    "    logger.info(\"This is an info message.\")\n",
    "    logger.warning(\"This is a warning message.\")\n",
    "    logger.error(\"This is an error message.\")\n",
    "    logger.critical(\"This is a critical message.\")\n",
    "\n",
    "# Perform the task and log messages\n",
    "perform_task()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. How can you set up logging to capture log messages from multiple modules or\n",
    "classes in a Python application?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To capture log messages from multiple modules or classes in a Python application, you need to follow these steps:\n",
    "\n",
    "Configure the logging settings: Set up the logging configuration at the application's entry point (usually in the main script). This will ensure that all loggers created by different modules or classes in the application follow the same logging settings.\n",
    "\n",
    "Create loggers in each module or class: In every module or class that needs to generate log messages, create a logger object using the logging.getLogger() method. By using the same logger name across modules and classes, they will all share the same logger configuration.\n",
    "\n",
    "Customize the log format and handlers: Customize the log format and add appropriate handlers to each logger. Handlers determine where the log messages will be sent, such as writing to a file, the console, or sending over the network. You can customize the log format using the Formatter class, as explained in the previous response.\n",
    "\n",
    "Here's an example of how to set up logging to capture log messages from multiple modules or classes in a Python application:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "\n",
    "class Module1:\n",
    "    def __init__(self):\n",
    "        self.logger = logging.getLogger(\"module1\")\n",
    "\n",
    "    def do_something(self):\n",
    "        self.logger.debug(\"Doing something in Module1.\")\n",
    "        self.logger.warning(\"Warning from Module1.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "\n",
    "class Module2:\n",
    "    def __init__(self):\n",
    "        self.logger = logging.getLogger(\"module2\")\n",
    "\n",
    "    def do_something_else(self):\n",
    "        self.logger.debug(\"Doing something else in Module2.\")\n",
    "        self.logger.error(\"Error from Module2.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "from module1 import Module1\n",
    "from module2 import Module2\n",
    "\n",
    "# Configure the logging settings\n",
    "logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "\n",
    "# Create loggers for each module\n",
    "logger_module1 = logging.getLogger(\"module1\")\n",
    "logger_module2 = logging.getLogger(\"module2\")\n",
    "\n",
    "# Set up file handlers for each logger\n",
    "file_handler_module1 = logging.FileHandler(\"module1.log\")\n",
    "file_handler_module2 = logging.FileHandler(\"module2.log\")\n",
    "\n",
    "# Customize the log format for each handler\n",
    "formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "file_handler_module1.setFormatter(formatter)\n",
    "file_handler_module2.setFormatter(formatter)\n",
    "\n",
    "# Add the handlers to the loggers\n",
    "logger_module1.addHandler(file_handler_module1)\n",
    "logger_module2.addHandler(file_handler_module2)\n",
    "\n",
    "# Instantiate modules and classes\n",
    "module1 = Module1()\n",
    "module2 = Module2()\n",
    "\n",
    "# Perform actions in modules and classes that generate log messages\n",
    "module1.do_something()\n",
    "module2.do_something_else()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. What is the difference between the logging and print statements in Python? When\n",
    "should you use logging over print statements in a real-world application?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Purpose:\n",
    "\n",
    "print statement: It is used to display information on the console during the program's execution. It is mainly used for debugging purposes or providing real-time feedback to users during development.\n",
    "\n",
    "logging: It is used for recording log messages that provide information, debugging details, warnings, errors, and other events during the program's execution. Logging is used to collect data about the program's behavior and status over time, even in production environments.\n",
    "\n",
    "2. Output Destination:\n",
    "\n",
    "print statement: The output is always printed to the standard output (usually the console).\n",
    "\n",
    "logging: The output can be directed to various destinations, such as files, the console, network sockets, or external log management systems. This makes logging more flexible and suitable for real-world applications where logs need to be stored for monitoring, analysis, and debugging purposes.\n",
    "\n",
    "3. Log Levels:\n",
    "\n",
    "print statement: It does not have the concept of log levels. All output is displayed regardless of the message's importance or severity.\n",
    "\n",
    "logging: It allows setting different log levels (e.g., DEBUG, INFO, WARNING, ERROR, CRITICAL) for log messages. Log levels help control the verbosity of the log output, allowing developers to capture only the relevant information based on the application's needs.\n",
    "\n",
    "4. Flexibility and Configurability:\n",
    "\n",
    "print statement: It is simple and easy to use for immediate feedback during development. However, it is challenging to disable or control its output selectively when the program is in production or more advanced logging behavior is required.\n",
    "\n",
    "logging: It offers a comprehensive and configurable logging framework. Developers can control what information to log, where to log, and at what level of severity to log. Logging can be configured globally for an entire application or for specific modules and classes.\n",
    "\n",
    "When to use logging over print statements in a real-world application:\n",
    "\n",
    "In a real-world application, it is generally recommended to use logging over print statements for the following reasons:\n",
    "\n",
    "Non-Intrusive Logging: Unlike print statements, logging does not interfere with the program's standard output, making it less likely to affect the program's behavior or user experience.\n",
    "\n",
    "Selective Logging: Logging allows setting different log levels, so you can choose what information to log based on its importance. This helps in separating debugging information from warning or error messages, making it easier to find relevant information in the logs.\n",
    "\n",
    "Flexibility in Output Destinations: With logging, you can direct log messages to various destinations, such as log files, databases, or log management systems. This makes it suitable for monitoring and maintaining large-scale applications.\n",
    "\n",
    "Persistent and Structured Logging: Logging provides a way to persist log messages over time, allowing you to review past events and track the application's behavior. Log messages can be formatted and structured, making them easier to parse and analyze.\n",
    "\n",
    "Debugging and Troubleshooting: Logging is more suitable for debugging and troubleshooting complex issues in a production environment. It allows you to record specific details and stack traces that can help diagnose problems.\n",
    "\n",
    "Overall, while print statements are useful for quick debugging during development, logging provides a more comprehensive and organized way to collect information about the program's behavior and status, making it a better choice for real-world applications."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Write a Python program that logs a message to a file named \"app.log\" with the\n",
    "following requirements:<br>\n",
    "● The log message should be \"Hello, World!\"<br>\n",
    "● The log level should be set to \"INFO.\"<br>\n",
    "● The log file should append new log entries without overwriting previous ones.<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:my_logger:Hello, World!\n"
     ]
    }
   ],
   "source": [
    "import logging\n",
    "\n",
    "def setup_logger():\n",
    "    # Create a logger\n",
    "    logger = logging.getLogger(\"my_logger\")\n",
    "\n",
    "    # Set the logging level to INFO\n",
    "    logger.setLevel(logging.INFO)\n",
    "\n",
    "    # Create a file handler that appends new log entries to the file\n",
    "    file_handler = logging.FileHandler(\"app.log\", mode=\"a\")\n",
    "\n",
    "    # Create a formatter for the log message\n",
    "    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n",
    "\n",
    "    # Set the formatter for the file handler\n",
    "    file_handler.setFormatter(formatter)\n",
    "\n",
    "    # Add the file handler to the logger\n",
    "    logger.addHandler(file_handler)\n",
    "\n",
    "    return logger\n",
    "\n",
    "def main():\n",
    "    # Set up the logger\n",
    "    logger = setup_logger()\n",
    "\n",
    "    # Log the message with level INFO\n",
    "    logger.info(\"Hello, World!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this program, we define a function setup_logger() to set up the logger with the specified requirements. It creates a logger named \"my_logger\" and sets the log level to INFO. It then creates a file handler using logging.FileHandler() with the mode set to \"a\" for append. The log message will be formatted using the specified formatter and added to the file handler.\n",
    "\n",
    "The main() function is where we call the setup_logger() function to create and configure the logger. Then, we log the message \"Hello, World!\" with the INFO log level using logger.info().\n",
    "\n",
    "Each time the program is executed, it will append the log message \"Hello, World!\" to the \"app.log\" file without overwriting previous entries. Subsequent runs will add new log entries to the existing file. This way, the log file will retain all the log messages from previous runs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Create a Python program that logs an error message to the console and a file named\n",
    "\"errors.log\" if an exception occurs during the program's execution. The error\n",
    "message should include the exception type and a timestamp."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-08-07 01:13:56,769 - ERROR - Exception occurred at 2023-08-07 01:13:56: ZeroDivisionError - division by zero\n",
      "ERROR:error_logger:Exception occurred at 2023-08-07 01:13:56: ZeroDivisionError - division by zero\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exception occurred at 2023-08-07 01:13:56: ZeroDivisionError - division by zero\n"
     ]
    }
   ],
   "source": [
    "import logging\n",
    "import traceback\n",
    "import sys\n",
    "import datetime\n",
    "\n",
    "def setup_logger():\n",
    "    # Create a logger\n",
    "    logger = logging.getLogger(\"error_logger\")\n",
    "\n",
    "    # Set the logging level to ERROR to only capture errors and above\n",
    "    logger.setLevel(logging.ERROR)\n",
    "\n",
    "    # Create a console handler to log errors to the console\n",
    "    console_handler = logging.StreamHandler()\n",
    "\n",
    "    # Create a file handler to log errors to \"errors.log\" file\n",
    "    file_handler = logging.FileHandler(\"errors.log\", mode=\"a\")\n",
    "\n",
    "    # Create a formatter for the log message\n",
    "    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n",
    "\n",
    "    # Set the formatter for the handlers\n",
    "    console_handler.setFormatter(formatter)\n",
    "    file_handler.setFormatter(formatter)\n",
    "\n",
    "    # Add the handlers to the logger\n",
    "    logger.addHandler(console_handler)\n",
    "    logger.addHandler(file_handler)\n",
    "\n",
    "    return logger\n",
    "\n",
    "def main():\n",
    "    # Set up the logger\n",
    "    logger = setup_logger()\n",
    "\n",
    "    try:\n",
    "        # Code that may raise an exception\n",
    "        result = 10 / 0\n",
    "    except Exception as e:\n",
    "        # Log the error message with the exception type and timestamp\n",
    "        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
    "        error_msg = f\"Exception occurred at {timestamp}: {type(e).__name__} - {str(e)}\"\n",
    "        logger.error(error_msg)\n",
    "\n",
    "        # Print the error message to the console (optional)\n",
    "        print(error_msg)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
